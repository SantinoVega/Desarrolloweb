
---------------------------------------------------------


INICIAR HOMESTEAD CON VAGRANT (MAQUINA VIRTUAL)


-Dentro de la carpeta donde tenemos instalado Homestead
-Revisamos el estado global de vagrant para saber si ya tenemos iniciada alguna maquina virtual.


#vagrant global-status
	*Nos muestra si existe alguna maquina virtual.

#vagrant up
	*Si existe una maquina virtual la inicia, sino la crea e inicia.
	*Si tenemos mas de una maquina virtual se debe especificar agregando el ID.

#vagrant reload --provision
	*Si modificamos la configuracion de Homestead.yaml necesitaremos recargar la maquina con la nueva configuracion.

#vagrant halt
	*Apaga la maquina virtual.

#vagrant suspend
	*Suspende la maquina virtual y guarda el estado actual.


-----------------------------------------------------------


CREAR Y SUBIR UN REPOSITORIO GIT DESDE 0. (Proyecto laravel ya existe)


-Primero se crea un repositorio vacio en GitHub.com
-Debemos tener un proyecto (Laravel) ya creado.
-En terminal navegamos hasta la carpeta del proyecto. y tecleamos.

# git init
	*Crea un repositorio GIT vacio.

# git add .
	*Agrega todos los archivos de la carpeta actual al repositorio local (stage).

#git remote add origin https://github.com/rutaDelProyecto
	*Se agrega la direccion web a donde se enviara nuestro proyecto.(Este paso se hace solo 1 vez por proyecto).


#git commit -m "mensaje descripticvo"
	*Confirma los cambios en el repositorio local.


#git push -u origin master
	*Sube las modificaciones al repositorio remoto.


----------------------------------------------------------


SUBIR REPOSITORIO LOCAL A REMOTO.


-Actualiza el repositorio remoto con los cambios en repositorio local


# git add .
	*Agrega todos los archivos de la carpeta actual al repositorio local (stage).

#git commit -m "mensaje descripticvo"
	*Confirma los cambios en el repositorio local.

#git push -u origin master
	*Sube las modificaciones al repositorio remoto.


----------------------------------------------------------


BAJAR REPOSITORIO LOCAL DESDE REMOTO.


-Actualiza nuestro repositorio local con el remoto


# git pull


---------------------------------------------------------------


GIT CREAR Y ELIMINAR BRANCH EN UN PROYECTO 

# git checkout -b prueba_branch
	*crea un branch en el proyecto y se cambia a el


# git branch prueba_branch
	*Otra forma de crear un branch sin pasar a el

# git checkout [nombre_brach]
	*Cambia entre branch del proyecto [se debe especificar nombre]


# git brach -d prueba_branch
	*Elimina un branch


----------------------------------------------------------------

BORRAR VISTAS DE LA CACHE DEL PROYECTO LARAVEL


-Laravel guarda las paginas previamente cargadas en la cache para agilizar la ejecucion, por lo que cuando recargamos una pagina sino a sufrido alguna modificacion la toma de la cache. para eliminar las vistas que estan almacenadas en la cache y asi garantizar que la vista que se muestra es lo que se ha programado borramos la cache de la siguiente forma.


# php artisan view:clear
	*Limpia la cache de las vistas en el proyecto actual.
	*Debemos estar en la carpeta del proyecto.


--------------------------------------------------------------


CREAR UN ALIAS


-Como crear un alias para realizar Test
-podemos ejecutar /vendor/bin/phpunit en la carpeta proyecto.

# alias t=vendor/bin/phpunit
#t
	*Se crea un alias "t", que al ser ejecutado realiza los Test del proyecto.



------------------------------------------------------------

MIGRACION - MANEJAR BASES DE DATOS CON LARAVEL


Para el tema de base de datos en laravel utilizamos los metodos definidos en laravel. con estas migraciones podemos tener una linea de tiempo de nuestras bases de datos similar a un versionado.

# php artisan migrate


-------------------------------------------------------------


CONECTAR A LA MAQUINA VIRTUAL POR SSH


-Nos ubicamos en la carpeta donde tenemos instalanda la maquina virtual (~/Homestead).

# vagrant ssh


-------------------------------------------------------------

INICIAR MYSQL DENTRO DE HOMESTEAD

-Para iniciar mysql en homestead debemos de entrar por SSH a la maquina virtual y una vez que estamos dentro de la maquina virtual ejecutamos el siguiente codigo.


#mysql -u root

mysql>

Dentro de la consola de mysql ya podemos ejecutar las queries o acciones que necesitemos.


------------------------------------------------------------


INICIAR SERVIDOR WEB (XAMPP) TERMINAL


-Se necesitan privilegios de superusuario.


# sudo /opt/lampp/lampp start
	*Inicia todos los servicios del servidor web.

# sudo /opt/lampp/lampp startmysql
	*Inicia solo el servicio mysql.

# sudo /opt/lampp/lampp startapache
	*Inicia solo el servicio apache.

# sudo /opt/lampp/lampp stop
	*Detiene todos los servicios.

# sudo /opt/lampp/lampp stopmysql
	*Detiene el servicio especificado.


------------------------------------------------------------


INICIAR MYSQL EN NUESTRO SISTEMA OPERATIVO (UBUNTU 16)


-Si tenemos instalado algun servidor web (XAMPP,WAMPP,LAMPP)
podemos iniciar solo el servico que necesitemos en este caso mysql.


# /opt/lampp/bin/mysql -u root -p
MariaDB>
	*A continuacion nos pide la contraseña de mysql para el usuario root.


------------------------------------------------------------


COMANDOS BASICOS MYSQL

>use [database]
	*Selecciona la BD [especificar nombre].

>show databases;
	*Muestra las BDs almacenadas.

>create database BaseDeDatos;
	*crea una BD con el nombre "BaseDeDatos".

>show tables;
	*Muestra las tablas dentro de una BD.

>create table [nombreTabla] 
([id] int autoincrement,[campo2] varchar(40), ...);
	*Crea una tabla con [especificar nombre].

>drop [table];
	*Elimina una tabla [especificar nombre].

>alter table [tabla] add coulumn ([campo] varchar(60));
	*Agreaga una columna y a la tabla [especificar nombre].


--------------------------------------------------------------


MIGRACION DE BD.


-Es necesario tener creada una base de datos en sql.
-En el proyecto Laravel/database/migrations existen 2 archivos donde se crean tablas y restablecer contraseña.


# php artisan migrate
	*Ejecuta metodo up() de /migrations.
	*Crea tablas o las modifica depende de que este programado en el metodo.

# php artisan migrate:reset
	*Borra las tablas llamando al metodo down()
	*Se debe ejecutar #php artisan migrade para volver a crear desde los archivos.

# php artisan migrate:refresh 
	*Ejecuta metodo down() y luego up() de /migrations.


# php artisan make:migration [nombre_descriptivo]
	*Crea un archivo en /migrations para ser migrate.


# php artisan migrate:rollback
	*regresará el último lote de migraciones ejecutado.


---------------------------------------------------------------


SEEDERS - QUERIES

# php artisan db:seed 
	*Ejecuta los seeder que contienen queries.

# php artisan migrate:fresh --seed
	*Ejecuta un fresh y enseguida un seed.


---------------------------------------------------------------


TINKER CONSOLA DINAMICA PHP


-Para entrar a la consola dinamica Tinker ejecutamos el siguiente comando desde la carpeta de nuestro proyecto.
-Podemos realizar pruebas desde esta consola sin teneer que ir al navegador y incluso podemos comprementar los test de vendor/bin/phpunit sin necesidad de ejecutar los seeders.
-Al entrar al entorno se cargan los seeder => registros y tablas de nuestro modelo.


# php artisan tinker

>> use App\Profession
	*Agrega el directorio al entorno para que encuentre el archivo Profession.


>> Profession::all();
	*Muestra los registros contenidos en el modelo de la relacion(tabla) Profession (directorio App\Profession del proyecto) que son llamados por los seeders.


>> User::all();
	*Muestra los registros de la relacion(tabla) User
	(directorio App\User del proyecto) que son llamados por los seeders.

>> $profession=Profession::first();
	*Crea una variable en el entorno con el primer registro.

>> $user=User::find(1);
	*Crea una variable con el id=1.


>> $profession=Profession::first();
	*Crea una variable con el id=1


>> $user::findEmail('000@000');
	*Busca en la tabla users el email pasado como parametro.
	*Esta funcion esta definida findEmail en App\User


-----------------------------------------------------------


TINKER INSERTAR REGISTROS

-Se pueden hacer de dos formas utilizando Eloquent o con la sintaxis de laravel.
- Se pueden pasar atributos masimos a un registro con un array pero eloquent tiene restringida esta forma para evitar inyeccion de codigo
- Se puede activar desde App\ se convierten de collecciones(objetos) a array(con un solo objeto) con lo que se puede manipular el objeto
- Collection{[{
	 App\User {#2874
         id: 1,
         name: "VincentVega",
         email: "666@5555",
         is_admin: 1,
         created_at: "2018-07-13 21:40:44",
         updated_at: "2018-07-13 21:40:44",
         profession_id: 1,
       },
       App\User {#2872
         id: 2,
         name: "SickBoy",
         email: "000@email",
         is_admin: 1,
         created_at: "2018-07-13 21:50:40",
         updated_at: "2018-07-13 22:15:04",
         profession_id: 4,
       },
      },
      ],
      }


-Al lograr extraer un solo objeto de la coleccion se puede manipular
- Array["name"=>"SickBoy","email"=>"000@email","profession_id"=>4];


>> $data=["name"=>"SickBoy","email"=>"000@email","profession_id"=>4];
	*Definimos un array con los valores para 1 objeto


>> User::create($data);
	*Crea e inserta un registro a la tabla users con la sintaxis de eloquent.


>> $usuario=new User(["name"=>"SickBoy","email"=>"000@email","profession_id"=>4];)
	*Crea un objeto y lo asigna a una variable pero no lo inserta a la base de datos.

>> $usuario->name
>> $usuario->is_admin 
>> $usuario->profession_id=2
	*Al tener un objeto en una variable podemos consultar sus atributos y modificarlos


>> $usuario->save();
	*Podemos insertar el objeto a la base de datos con el metodo save();
	*Obviamente solo se puede hacer teniendo la estructura del objeto en una variable.
	*Estos metodos solo se pueden aplicar a objetos individuales y no a collecciones,


>> $usuario->exist
	*true si existe
